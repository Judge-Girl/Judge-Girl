<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2020 Johnny850807 (Waterball) 潘冠辰
  ~   Licensed under the Apache License, Version 2.0 (the "License");
  ~   you may not use this file except in compliance with the License.
  ~   You may obtain a copy of the License at
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~   Unless required by applicable law or agreed to in writing, software
  ~   distributed under the License is distributed on an "AS IS" BASIS,
  ~   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~   See the License for the specific language governing permissions and
  ~   limitations under the License.
  -->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tw.waterball.judge-girl</groupId>
    <artifactId>judge-girl</artifactId>
    <version>${revision}</version>
    <packaging>pom</packaging>

    <name>Judge Girl</name>
    <description>Root project of Judge Girl</description>

    <modules>
        <module>Dependencies</module>
        <module>Commons</module>
        <module>Plugins</module>
        <module>Spring-Boot</module>
        <module>API</module>
        <module>Domain</module>
        <module>Judger</module>
        <module>Judger/Code-Quality-Inspection</module>
    </modules>

    <properties>
        <revision>0.0.1-SNAPSHOT</revision>
        <java.version>11</java.version>
        <intellij.annotations.version>12.0</intellij.annotations.version>
        <lombok.version>1.18.12</lombok.version>
        <javax.inject.version>1</javax.inject.version>
        <javax.validation.version>2.0.1.Final</javax.validation.version>
        <org.hibernate-validator.version>6.0.10.Final</org.hibernate-validator.version>
        <javax.el.version>3.0.0</javax.el.version>
        <org.glassfish.web.javax.el.version>2.2.6</org.glassfish.web.javax.el.version>
        <maven-failsafe-plugin.version>2.22.0</maven-failsafe-plugin.version>
        <maven-surefile-plugin.version>2.22.0</maven-surefile-plugin.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven-checkstyle-plugin.version>3.1.2</maven-checkstyle-plugin.version>
        <puppycrawl.checkstyle.version>8.40</puppycrawl.checkstyle.version>
        <maven-spotbugs-maven-plugin.version>4.2.0</maven-spotbugs-maven-plugin.version>
        <spotbugs-plugin.version>4.2.3</spotbugs-plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>tw.waterball.judge-girl</groupId>
                <artifactId>judge-girl-dependencies</artifactId>
                <version>${revision}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Start of Shared Components -->

        <!-- JSR380 -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${org.hibernate-validator.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>${javax.validation.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>javax.el-api</artifactId>
            <version>${javax.el.version}</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>javax.el</artifactId>
            <version>${org.glassfish.web.javax.el.version}</version>
        </dependency>
        <!-- End of JSR380 -->

        <dependency>
            <groupId>com.intellij</groupId>
            <artifactId>annotations</artifactId>
            <version>${intellij.annotations.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>${javax.inject.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>


        <!-- Start of Shared Components -->
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>${maven-checkstyle-plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                    </executions>
                    <dependencies>
                        <dependency>
                            <groupId>com.puppycrawl.tools</groupId>
                            <artifactId>checkstyle</artifactId>
                            <version>${puppycrawl.checkstyle.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <includes>
                        <include>**/*IT.java</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefile-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <configLocation>checkstyle.xml</configLocation>
                    <encoding>UTF-8</encoding>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                    <linkXRef>false</linkXRef>
                </configuration>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${maven-spotbugs-maven-plugin.version}</version>
                <configuration>
                    <threshold>Low</threshold>
                    <effort>Max</effort>
                    <debug>true</debug>
                    <xmlOutput>true</xmlOutput>
                    <xmlOutputDirectory>target/</xmlOutputDirectory>
                    <omitVisitors>
                        <!-- EI2: May expose internal representation by incorporating reference to mutable object
                        Omit reason:
                        -->
                        <!--                        FindReturnRef,-->
                        <!-- UwF: Field not initialized in constructor but dereferenced without null check
                        Omit reason: When annotate a Map field with Lombok's @Singular annotation,
                        lombok builder doesn't check the nullity of the map, causing the inevitable failure on this bug detection -->
                        UnreadFields,
                        <!-- Nm: Class names shouldn’t shadow simple name of implemented interface.
                        Omit reason: We typically tolerate our Presenter (clean architecture) to shadow its name from its interface,
                        Example: `class SubmissionPresenter implements tw.waterball.judgegirl.submission.domain.usecases.SubmissionPresenter`
                        -->
                        Naming,
                        <!-- UPM: Private method is never called.
                        Omit reason: False Positive, some methods are actually called by Spring boot.
                        Example: `DockerJudgerDeployer.removeAllExitedJudgerContainers` -->
                        FindUncalledPrivateMethods,
                        <!-- DMI: Code contains a hard coded reference to an absolute pathname
                        Omit reason: In a container, the hard-coded reference to an absolute pathname is acceptable.
                        Example: `tw.waterball.judgegirl.judger.filelayout.AbstractItem.getAbsolutePath` -->
                        DumbMethodInvocations,
                        <!-- UW: Unconditional wait, Wa: Wait not in loop
                        Omit reason: `tw.waterball.judgegirl.commons.utils.NotifyWaitLock` is an util class which is an encapsulation of 'lock'
                        and so it doesn't require condition to meet during notify-and-wait.
                        -->
                        FindUnconditionalWait, WaitInLoop,
                        <!-- EI: May expose internal representation by returning reference to mutable object
                            EI2: May expose internal representation by incorporating reference to mutable object
                            Omit reason: Too strict. Classes currently tightly coupled with 'java.util.Date' class which is mutable.-->
                        FindReturnRef
                    </omitVisitors>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.github.spotbugs</groupId>
                        <artifactId>spotbugs</artifactId>
                        <version>${spotbugs-plugin.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
